			数据库自动生成模板
1. 数据库CodeFirst操作步骤
	参考链接	<url>https://www.cnblogs.com/kexxxfeng/p/5095812.html</url>
	1.1 首先安装：MySQL5.7，mysql-connector-net-6.9.9, mysql-for-visual-1.2.7

	1.2 NuGet安装：MySql.Data.Entity 6.9.9, MySql.Data v6.9.9, SQLite.CodeFirst v1.3.2.19
		这时“引用”就有了
			EntityFramework
			EntityFramework.SqlServer
			MySql.Data
			MySql.Data.Entity.EF6
			SQLite.CodeFirst

	1.3 添加新建项->ADO.NET实体对象模型(命名MyFirstTestModel)->空CodeFirst模型。
		说明：这一步骤在app.config添加了连接字符串；生成了MyFirstTestModel模板类，需要手动把文件改成如下格式：
			namespace StandardTemplate.Test
			{
				using System;
				using System.Data.Entity;
				using System.Linq;

				[DbConfigurationType(typeof(MySql.Data.Entity.MySqlEFConfiguration))]		//这是需要添加的
				public class MyFirstTestModel : DbContext
				{
					//您的上下文已配置为从您的应用程序的配置文件(App.config 或 Web.config)
					//使用“MyFirstTestModel”连接字符串。默认情况下，此连接字符串针对您的 LocalDb 实例上的
					//“StandardTemplate.Test.MyFirstTestModel”数据库。
					// 
					//如果您想要针对其他数据库和/或数据库提供程序，请在应用程序配置文件中修改“MyFirstTestModel”
					//连接字符串。
					public MyFirstTestModel()
						: base("name=MyFirstTestModel")
					{
						Database.SetInitializer(new MigrateDatabaseToLatestVersion<MyFirstTestModel, Migrations.Configuration>());
					}

					protected override void OnModelCreating(DbModelBuilder modelBuilder)	//新添加
					{
						base.OnModelCreating(modelBuilder);
					}

					//为您要在模型中包含的每种实体类型都添加 DbSet。有关配置和使用 Code First  模型
					//的详细信息，请参阅 http://go.microsoft.com/fwlink/?LinkId=390109。

					public virtual DbSet<DemoEntity> MyEntities { get; set; }	//DemoEntity是我自己建立的实体数据类
				}

				//public class MyEntity
				//{
				//    public int Id { get; set; }
				//    public string Name { get; set; }
				//}
			}

	1.4 NuGet控制台输入：Enable-Migrations, 生成了Migration文件夹和Configuration类：
			namespace StandardTemplate.Migrations
			{
				using System;
				using System.Data.Entity;
				using System.Data.Entity.Migrations;
				using System.Linq;
				using Test;

				internal sealed class Configuration : DbMigrationsConfiguration<StandardTemplate.Test.MyFirstTestModel>
				{
					public Configuration()
					{
						AutomaticMigrationsEnabled = true;			//注意这里的添加
						AutomaticMigrationDataLossAllowed = true;
					}

					protected override void Seed(StandardTemplate.Test.MyFirstTestModel context)
					{
						//  This method will be called after migrating to the latest version.

						//  You can use the DbSet<T>.AddOrUpdate() helper extension method 
						//  to avoid creating duplicate seed data. E.g.
						//
						//    context.People.AddOrUpdate(
						//      p => p.FullName,
						//      new Person { FullName = "Andrew Peters" },
						//      new Person { FullName = "Brice Lambson" },
						//      new Person { FullName = "Rowan Miller" }
						//    );
						//
						context.MyEntities.AddOrUpdate(new DemoEntity()
						{
							Name = "张三-1",
						});

						context.SaveChanges();
					}
				}
			}

	1.5 修改连接字符串：
		<add 
			 name="MyFirstTestModel" 
		     connectionString="data source=127.0.0.1;		//IP
							   port=3306;					//Port
							   initial catalog=valverig;	//Schema Name
							   user id=hterp;				//User
							   password=123456"				//Password
			 providerName="MySql.Data.MySqlClient" 
		/>

	1.6 测试：
		在主代码某个位置添加如下代码：
			MyFirstTestModel context = new MyFirstTestModel();
            context.MyEntities.Load();
		这时打开数据库就可以看到新生成的表demoEntities了。

2. 模板项所需修改
	2.1 新建类继承Entity->DemoEntity2.cs
	2.2 添加自身字段，签名为public
	2.3 在MyFirstTestModel类中添加属性:	public virtual DbSet<DemoEntity2> DemoEntities2 { get; set; }
	2.4 将初始化项添加到Configuration类：
		context.MyEntities.AddOrUpdate(
						new DemoEntity2() { Name = "张三-1" }
						new DemoEntity2() { Name = "李四-1" }
					);
3. 项目模板所需修改
	3.1 完成好上面第一部分所需；
	3.2 配置状态可修改连接字符串；